plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id 'com.github.johnrengelman.shadow' version '8.1.1' // 打包自带依赖
}

group = 'io.github.tanice'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    // mm
    maven { url = "https://mvn.lumine.io/repository/maven-public/" }
    // nbt-api
    maven {
        name = "CodeMC"
        url = uri("https://repo.codemc.io/repository/maven-public/")
    }
    // packageEvents
    maven { url = "https://repo.codemc.io/repository/maven-releases/" }
    maven { url = "https://repo.codemc.io/repository/maven-snapshots/" }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.20-R0.1-SNAPSHOT")

    // js引擎, 运行时需要使用
    implementation("org.graalvm.js:js:22.3.1")
    implementation("org.graalvm.js:js-scriptengine:22.3.1")
    // json序列化
    implementation ("com.fasterxml.jackson.core:jackson-databind:2.15.2")
    // MiniMessage
    implementation("net.kyori:adventure-text-minimessage:4.22.0")
    // asm
    implementation("org.ow2.asm:asm:9.8")

    // nbt-api
    compileOnly("de.tr7zw:item-nbt-api-plugin:2.15.1")
    // mm
    compileOnly("io.lumine:Mythic-Dist:5.9.0")
    // packageEvents
    compileOnly("com.github.retrooper:packetevents-spigot:2.9.3")
}

shadowJar {
    // 重定位依赖包，避免与其他插件冲突
    relocate 'com.fasterxml.jackson', 'io.github.tanice.terracraft.libs.jackson'
    relocate 'org.graalvm', 'io.github.tanice.terracraft.libs.graalvm'
    relocate 'net.kyori', 'io.github.tanice.terracraft.libs.kyori'
    relocate 'org.ow2.asm', 'io.github.tanice.terracraft.libs.asm'

    // 输出的 JAR 文件名
    archiveFileName.set("TerraCraft-${version}-shadow.jar")
}

// 让构建任务依赖阴影任务，确保打包完整
build.dependsOn(shadowJar)

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21.4")
        // 运行服务器时使用阴影 JAR
        pluginJars.from(shadowJar)
    }
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
